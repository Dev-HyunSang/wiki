(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{204:function(t,s,n){"use strict";n.r(s);var a=n(0),r=Object(a.a)({},(function(){var t=this,s=t._self._c;return s("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),t._m(6),t._v(" "),t._m(7),t._v(" "),t._m(8),t._m(9),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),t._m(12),t._m(13),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://jwprogramming.tistory.com/17",target:"_blank",rel:"noopener noreferrer"}},[t._v("Round-Robin(RR)이란? , CPU-Scheduling들"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://programmingsummaries.tistory.com/384",target:"_blank",rel:"noopener noreferrer"}},[t._v("[NodeJS] 클러스터(cluster)에 대한 정리"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://smoh.tistory.com/339",target:"_blank",rel:"noopener noreferrer"}},[t._v("Express를 이용한 서버 클러스터 구성."),s("OutboundLink")],1)])])])}),[function(){var t=this._self._c;return t("h1",{attrs:{id:"_20230822-node-js-and-cluster"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_20230822-node-js-and-cluster"}},[this._v("#")]),this._v(" 20230822 - Node.js and Cluster")])},function(){var t=this,s=t._self._c;return s("ul",[s("li",[t._v("node.js는 기본적으로 하나의 프로세스가 "),s("code",[t._v("32bit")]),t._v("에서는 512MB 메모리를 사용할 수 있으며, "),s("code",[t._v("64bit")]),t._v("에서는 1.5GB 메모리를 사용하도록 제한 되어 있음.")]),t._v(" "),s("li",[t._v("Chrome V8 Engine의 제한사항을 그대로 반영하여 사용하는 것임. 설정을 통해서 더 늘려서 사용할 수도 있지만 worker를 늘리는 것을 권장하고 있음.")]),t._v(" "),s("li",[t._v("여러 개의 워커들이 병렬로 동작하며 효율을 극대화하는 것을 바람직한 방향으로 권고하고 있음.")])])},function(){var t=this._self._c;return t("h2",{attrs:{id:"worker를-생성하는-방법"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#worker를-생성하는-방법"}},[this._v("#")]),this._v(" worker를 생성하는 방법")])},function(){var t=this,s=t._self._c;return s("ul",[s("li",[t._v("Node.js에서는 worker를 생성하는 방법은 두 가지임.\n"),s("ul",[s("li",[s("code",[t._v("child_process")]),t._v(", "),s("code",[t._v("cluster")]),t._v(" 정도로 요약할 수 있음.")])])]),t._v(" "),s("li",[s("strong",[s("code",[t._v("cluster")])]),t._v(" 는 Node.js v0.8부터 소개 되었음. 큰 부하를 노드 프로세스들의 클러스터를 통해 다루려는 목적으로 시작됨.\n"),s("ul",[s("li",[t._v("이 프로세스들은 서버의 포트들을 공유할 수 있기 때문에 Web Application에 매우 적합함.")])])]),t._v(" "),s("li",[t._v("프로세스들을 단순하게 병렬로 실행하는 것은 "),s("code",[t._v("child_process.fork()")]),t._v("로 가능하고, 로드밸런싱과 포트 공유 등이 필요하다면 클러스터로 접근하는 것이 좋음.\n"),s("ul",[s("li",[t._v("IPC(Inter-Process Communication)로 process 간의 통신이 가능하기 때문에 로드 밸런싱 등의 추가적인 기능이 필요한 경우 클러스터를 활용하고 워크를 직접적으로 컨트롤 해야하는 경우 "),s("code",[t._v("child_process")]),t._v("를 주로 활용하게 됨.")])])]),t._v(" "),s("li",[t._v("새로운 "),s("code",[t._v("child_process")]),t._v("는 모두 V8의 인스턴스이기 때문에 30ms의 시작시간과 "),s("code",[t._v("10MB")]),t._v(" 가량의 메모리를 소모함.")])])},function(){var t=this._self._c;return t("h2",{attrs:{id:"클러스터의-스케쥴링-방식"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#클러스터의-스케쥴링-방식"}},[this._v("#")]),this._v(" 클러스터의 스케쥴링 방식")])},function(){var t=this,s=t._self._c;return s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" cluster "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cluster"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\ncluster"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("schedulingPolicy "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cluster"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SCHED_NONE")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\ncluster"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("schedulingPolicy "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cluster"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SCHED_RR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this,s=t._self._c;return s("ul",[s("li",[t._v("클러스터는 "),s("code",[t._v("cluster")]),t._v(" 모듈을 가지고 온다.")]),t._v(" "),s("li",[s("code",[t._v("cluster")]),t._v(" 모듈을 가지고 왔다면, 실제 클러스터를 생성하기 전에 스케쥴링 방식을 설정할 수 있음.")]),t._v(" "),s("li",[s("strong",[s("code",[t._v("cluster.SCHED_NONE")]),t._v(":")]),t._v(" 워커 스케쥴을 OS에 맡김.")]),t._v(" "),s("li",[s("strong",[s("code",[t._v("cluster.SCHED_RR")]),t._v(":")]),t._v(" 워커 스케쥴을 Round Robin 방식으로 함.\n"),s("ul",[s("li",[s("strong",[t._v("Round Robin:")]),t._v(" 시분할 시스템을 위해 설계된 선점형 스케쥴링의 하나로서, 프로세서들 사이에 우선순위를 두지 않고, 순서대로 시간단위(Time Quantum/Slice)로 CPU를 할당하는 방식의 CPU 스케줄링 알고리즘.")])])]),t._v(" "),s("li",[t._v("기본적으로 스케쥴을 OS에 맡기는 방식이었음, 하지만 특정 워커에 작업이 몰리는 경우가 많아짐.\n"),s("ul",[s("li",[t._v("이러한 문제점을 해결하기 위해서 순차적으로 하나식 작업을 배분하는 Round Robin 방식이 Node.js v0.12에서 추가됨.")])])])])},function(){var t=this._self._c;return t("h3",{attrs:{id:"master-and-worker"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#master-and-worker"}},[this._v("#")]),this._v(" Master and Worker")])},function(){var t=this,s=t._self._c;return s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cluster"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isMaster"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Master'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cluster"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isWorker"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Worker'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" worker "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cluster"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fork")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this,s=t._self._c;return s("ul",[s("li",[t._v("클러스터 모듈은 지금 실행된 인스턴스가 마스터("),s("code",[t._v("isMaster")]),t._v(") 혹은 워커("),s("code",[t._v("isWorker")]),t._v(")인지 확인할 수 있습니다.")]),t._v(" "),s("li",[t._v("워커 생성은 "),s("code",[t._v("fork")]),t._v("를 수행만큼 생성됨.")]),t._v(" "),s("li",[t._v("동일한 JavaScript 파일을 실행하면서 처음 실행되면 기본적은 마스터가 됨.\n"),s("ul",[s("li",[t._v("마스터에서는 "),s("code",[t._v("cluster.fork()")]),t._v(" 메서드를 통해서 워커들을 생성하면 생성된 워커들도 마찬가지로 동일한 JavaScript 파일을 실행하게 됨."),s("br"),t._v("\n이때 이미 마스터 클러스터가 존재하는 경우 새롭게 실행되는 프로세스는 워커 클러스터가 됨.")])])]),t._v(" "),s("li",[t._v("마스터와 워커가 수행해야할 각 작업은 "),s("code",[t._v("isMaster")]),t._v(", "),s("code",[t._v("isWorker")]),t._v(" 메서드를 활용해서 마스터와 워커를 구분해서 규정해 줌.\n"),s("ul",[s("li",[t._v("마스터인 경우 되도록 워커들을 생성하고 관리하는 로직만 포함하고 그 외 로직은 적게 가져가는 것이 좋음.")])])])])},function(){var t=this._self._c;return t("h2",{attrs:{id:"woker-생성-·-제거-이벤트"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#woker-생성-·-제거-이벤트"}},[this._v("#")]),this._v(" Woker 생성 · 제거 이벤트")])},function(){var t=this._self._c;return t("ul",[t("li",[this._v("워커가 생성되면 online 이벤트가 발생함. 워카가 죽으면 exit 이벤트가 발생함.")]),this._v(" "),t("li",[this._v("이벤트들을 활용해서 워커가 생성되었을 때 필요한 로직들과 워커가 죽었을 때 복구를 위한 작업들을 설정해 줄 수 있음.")])])},function(){var t=this,s=t._self._c;return s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("cluster"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'online'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("worker")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("생성된 워커의 아이디: ")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("worker"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("process"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pid"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\ncluster"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'exit'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("worker"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" code"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" signal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("죽은 워커의 아이디: ")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("worker"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("process"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pid"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("죽은 워커의 exit code: ")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("code"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("죽은 워커의 signal: ")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("signal"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this._self._c;return t("h2",{attrs:{id:"공부하기-위해-참고한-자료"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#공부하기-위해-참고한-자료"}},[this._v("#")]),this._v(" 공부하기 위해 참고한 자료")])}],!1,null,null,null);s.default=r.exports}}]);